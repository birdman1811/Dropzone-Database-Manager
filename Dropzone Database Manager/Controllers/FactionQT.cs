// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using FactionQT;
//
//    var factions = Factions.FromJson(jsonString);

namespace FactionQT
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Factions
    {
        [JsonProperty("total_rows")]
        public long TotalRows { get; set; }

        [JsonProperty("offset")]
        public long Offset { get; set; }

        [JsonProperty("rows")]
        public Row[] Rows { get; set; }
    }

    public partial class Row
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("key")]
        public string Key { get; set; }

        [JsonProperty("value")]
        public long Value { get; set; }

        [JsonProperty("doc")]
        public Doc Doc { get; set; }
    }

    public partial class Doc
    {
        [JsonProperty("_id")]
        public string Id { get; set; }

        [JsonProperty("_rev")]
        public string Rev { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Lore")]
        public string Lore { get; set; }

        [JsonProperty("GamePlay")]
        public string GamePlay { get; set; }

        [JsonProperty("Imageurl")]
        public string Imageurl { get; set; }
    }

    public partial class Factions
    {
        public static Factions FromJson(string json) => JsonConvert.DeserializeObject<Factions>(json, FactionQT.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Factions self) => JsonConvert.SerializeObject(self, FactionQT.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}

