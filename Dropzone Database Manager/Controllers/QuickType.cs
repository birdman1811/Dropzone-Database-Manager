// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var ucmUnits = UcmUnits.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class UcmUnits
    {
        [JsonProperty("total_rows")]
        public long TotalRows { get; set; }

        [JsonProperty("offset")]
        public long Offset { get; set; }

        [JsonProperty("rows")]
        public Row[] Rows { get; set; }
    }

    public partial class Row
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("key")]
        public Key Key { get; set; }

        [JsonProperty("value")]
        public object Value { get; set; }
    }

    public partial class Key
    {
        [JsonProperty("_id")]
        public string KeyId { get; set; }

        [JsonProperty("_rev")]
        public string Rev { get; set; }

        [JsonProperty("Id")]
        public string Id { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Armour")]
        public long Armour { get; set; }

        [JsonProperty("Move")]
        public long Move { get; set; }

        [JsonProperty("CounterMeasures")]
        public string[] CounterMeasures { get; set; }

        [JsonProperty("DamagePoints")]
        public long DamagePoints { get; set; }

        [JsonProperty("Points")]
        public long Points { get; set; }

        [JsonProperty("Type")]
        public string Type { get; set; }

        [JsonProperty("Category")]
        public string Category { get; set; }

        [JsonProperty("Cqb")]
        public double Cqb { get; set; }

        [JsonProperty("Fortitude")]
        public long Fortitude { get; set; }

        [JsonProperty("SquadSizeCoherancy")]
        public string[] SquadSizeCoherancy { get; set; }

        [JsonProperty("LandingZone")]
        public string LandingZone { get; set; }

        [JsonProperty("TransportOptions")]
        public string[] TransportOptions { get; set; }

        [JsonProperty("ExtraRules")]
        public string[] ExtraRules { get; set; }

        [JsonProperty("Special")]
        public string[] Special { get; set; }

        [JsonProperty("Weapons")]
        public Weapon[] Weapons { get; set; }

        [JsonProperty("Faction")]
        public string Faction { get; set; }
    }

    public partial class Weapon
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Energy")]
        public long Energy { get; set; }

        [JsonProperty("Shots")]
        public long Shots { get; set; }

        [JsonProperty("Accuracy")]
        public long Accuracy { get; set; }

        [JsonProperty("RangeFull")]
        public string RangeFull { get; set; }

        [JsonProperty("RangeCountered")]
        public string RangeCountered { get; set; }

        [JsonProperty("MoveFire")]
        public string MoveFire { get; set; }

        [JsonProperty("Arc")]
        public string Arc { get; set; }

        [JsonProperty("Optional")]
        public bool Optional { get; set; }

        [JsonProperty("OptionalCost")]
        public long OptionalCost { get; set; }

        [JsonProperty("Special")]
        public string[] Special { get; set; }

        [JsonProperty("FullString")]
        public string FullString { get; set; }
    }

    public enum CounterMeasure { A, E2, NA };

    public enum Faction { Ucm };

    public enum LandingZone { L, S, Tiny };

    public enum TypeEnum { Aircraft, Infantry, Vehicle };

    public partial struct MoveFire
    {
        public CounterMeasure? Enum;
        public long? Integer;

        public static implicit operator MoveFire(CounterMeasure Enum) => new MoveFire { Enum = Enum };
        public static implicit operator MoveFire(long Integer) => new MoveFire { Integer = Integer };
    }

    public partial class UcmUnits
    {
        public static UcmUnits FromJson(string json) => JsonConvert.DeserializeObject<UcmUnits>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this UcmUnits self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CounterMeasureConverter.Singleton,
                FactionConverter.Singleton,
                LandingZoneConverter.Singleton,
                TypeEnumConverter.Singleton,
                MoveFireConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CounterMeasureConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CounterMeasure) || t == typeof(CounterMeasure?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "A":
                    return CounterMeasure.A;
                case "E+2":
                    return CounterMeasure.E2;
                case "N/A":
                    return CounterMeasure.NA;
            }
            throw new Exception("Cannot unmarshal type CounterMeasure");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CounterMeasure)untypedValue;
            switch (value)
            {
                case CounterMeasure.A:
                    serializer.Serialize(writer, "A");
                    return;
                case CounterMeasure.E2:
                    serializer.Serialize(writer, "E+2");
                    return;
                case CounterMeasure.NA:
                    serializer.Serialize(writer, "N/A");
                    return;
            }
            throw new Exception("Cannot marshal type CounterMeasure");
        }

        public static readonly CounterMeasureConverter Singleton = new CounterMeasureConverter();
    }

    internal class FactionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Faction) || t == typeof(Faction?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "UCM")
            {
                return Faction.Ucm;
            }
            throw new Exception("Cannot unmarshal type Faction");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Faction)untypedValue;
            if (value == Faction.Ucm)
            {
                serializer.Serialize(writer, "UCM");
                return;
            }
            throw new Exception("Cannot marshal type Faction");
        }

        public static readonly FactionConverter Singleton = new FactionConverter();
    }

    internal class LandingZoneConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(LandingZone) || t == typeof(LandingZone?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "L":
                    return LandingZone.L;
                case "S":
                    return LandingZone.S;
                case "Tiny":
                    return LandingZone.Tiny;
            }
            throw new Exception("Cannot unmarshal type LandingZone");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (LandingZone)untypedValue;
            switch (value)
            {
                case LandingZone.L:
                    serializer.Serialize(writer, "L");
                    return;
                case LandingZone.S:
                    serializer.Serialize(writer, "S");
                    return;
                case LandingZone.Tiny:
                    serializer.Serialize(writer, "Tiny");
                    return;
            }
            throw new Exception("Cannot marshal type LandingZone");
        }

        public static readonly LandingZoneConverter Singleton = new LandingZoneConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Aircraft":
                    return TypeEnum.Aircraft;
                case "Infantry":
                    return TypeEnum.Infantry;
                case "Vehicle":
                    return TypeEnum.Vehicle;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Aircraft:
                    serializer.Serialize(writer, "Aircraft");
                    return;
                case TypeEnum.Infantry:
                    serializer.Serialize(writer, "Infantry");
                    return;
                case TypeEnum.Vehicle:
                    serializer.Serialize(writer, "Vehicle");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class MoveFireConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MoveFire) || t == typeof(MoveFire?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new MoveFire { Integer = integerValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "A":
                            return new MoveFire { Enum = CounterMeasure.A };
                        case "E+2":
                            return new MoveFire { Enum = CounterMeasure.E2 };
                        case "N/A":
                            return new MoveFire { Enum = CounterMeasure.NA };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type MoveFire");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (MoveFire)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case CounterMeasure.A:
                        serializer.Serialize(writer, "A");
                        return;
                    case CounterMeasure.E2:
                        serializer.Serialize(writer, "E+2");
                        return;
                    case CounterMeasure.NA:
                        serializer.Serialize(writer, "N/A");
                        return;
                }
            }
            throw new Exception("Cannot marshal type MoveFire");
        }

        public static readonly MoveFireConverter Singleton = new MoveFireConverter();
    }
}

