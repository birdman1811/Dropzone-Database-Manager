// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var ucmUnits = Units.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Units
    {
        [JsonProperty("total_rows")]
        public long TotalRows { get; set; }

        [JsonProperty("offset")]
        public long Offset { get; set; }

        [JsonProperty("rows")]
        public Row[] Rows { get; set; }
    }

    public partial class Row
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("key")]
        public Key Key { get; set; }

        [JsonProperty("value")]
        public object Value { get; set; }
    }

    public partial class Key
    {
        [JsonProperty("_id")]
        public string KeyId { get; set; }

        [JsonProperty("_rev")]
        public string Rev { get; set; }

        [JsonProperty("Id")]
        public string Id { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Armour")]
        public long Armour { get; set; }

        [JsonProperty("Move")]
        public long Move { get; set; }

        [JsonProperty("CounterMeasures")]
        public string[] CounterMeasures { get; set; }

        [JsonProperty("DamagePoints")]
        public long DamagePoints { get; set; }

        [JsonProperty("Points")]
        public long Points { get; set; }

        [JsonProperty("Type")]
        public string Type { get; set; }

        [JsonProperty("Category")]
        public string Category { get; set; }

        [JsonProperty("Cqb")]
        public double Cqb { get; set; }

        [JsonProperty("Fortitude")]
        public long Fortitude { get; set; }

        [JsonProperty("SquadSizeCoherancy")]
        public string[] SquadSizeCoherancy { get; set; }

        [JsonProperty("LandingZone")]
        public string LandingZone { get; set; }

        [JsonProperty("TransportOptions")]
        public string[] TransportOptions { get; set; }

        [JsonProperty("ExtraRules")]
        public string[] ExtraRules { get; set; }

        [JsonProperty("Special")]
        public string[] Special { get; set; }

        [JsonProperty("Weapons")]
        public Weapon[] Weapons { get; set; }

        [JsonProperty("Faction")]
        public string Faction { get; set; }
    }

    public partial class Weapon
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Energy")]
        public long Energy { get; set; }

        [JsonProperty("Shots")]
        public long Shots { get; set; }

        [JsonProperty("Accuracy")]
        public long Accuracy { get; set; }

        [JsonProperty("RangeFull")]
        public string RangeFull { get; set; }

        [JsonProperty("RangeCountered")]
        public string RangeCountered { get; set; }

        [JsonProperty("MoveFire")]
        public string MoveFire { get; set; }

        [JsonProperty("Arc")]
        public string Arc { get; set; }

        [JsonProperty("Optional")]
        public bool Optional { get; set; }

        [JsonProperty("OptionalCost")]
        public long OptionalCost { get; set; }

        [JsonProperty("Special")]
        public string[] Special { get; set; }

        [JsonProperty("FullString")]
        public string FullString { get; set; }
    }

   

    

    public partial class Units
    {
        public static Units FromJson(string json) => JsonConvert.DeserializeObject<Units>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Units self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {                
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    

    

    

    

    
}

